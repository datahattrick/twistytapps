// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: users.sql

package sqlite

import (
	"context"
	"time"
)

const createGroupRelationship = `-- name: CreateGroupRelationship :exec
INSERT INTO UsersGroupsRelation (userid, groupid)
VALUES (?1, ?2)
`

type CreateGroupRelationshipParams struct {
	Userid  string
	Groupid string
}

func (q *Queries) CreateGroupRelationship(ctx context.Context, arg CreateGroupRelationshipParams) error {
	_, err := q.db.ExecContext(ctx, createGroupRelationship, arg.Userid, arg.Groupid)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO Users (id, created_at, updated_at, first_name, last_name, email, username, api_key)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8)
RETURNING id, created_at, updated_at, first_name, last_name, email, username, api_key
`

type CreateUserParams struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	FirstName string
	LastName  string
	Email     string
	Username  string
	ApiKey    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Username,
		arg.ApiKey,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.ApiKey,
	)
	return i, err
}
