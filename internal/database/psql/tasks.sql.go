// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: tasks.sql

package psql

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCappTask = `-- name: CreateCappTask :one
INSERT INTO Capp (id, name)
VALUES ($1, $2)
RETURNING id, name
`

type CreateCappTaskParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) CreateCappTask(ctx context.Context, arg CreateCappTaskParams) (Capp, error) {
	row := q.db.QueryRowContext(ctx, createCappTask, arg.ID, arg.Name)
	var i Capp
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createMappTask = `-- name: CreateMappTask :one
INSERT INTO Mapp (id, name)
VALUES ($1, $2)
RETURNING id, name
`

type CreateMappTaskParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) CreateMappTask(ctx context.Context, arg CreateMappTaskParams) (Mapp, error) {
	row := q.db.QueryRowContext(ctx, createMappTask, arg.ID, arg.Name)
	var i Mapp
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO Tasks (id, name, type, status, class_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, type, status, class_id
`

type CreateTaskParams struct {
	ID      uuid.UUID
	Name    string
	Type    sql.NullString
	Status  sql.NullString
	ClassID sql.NullString
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.Status,
		arg.ClassID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Status,
		&i.ClassID,
	)
	return i, err
}

const relateCappTask = `-- name: RelateCappTask :exec
INSERT INTO TaskCapp (task_id, capp_id)
VALUES ($1, $2)
`

type RelateCappTaskParams struct {
	TaskID uuid.UUID
	CappID uuid.NullUUID
}

func (q *Queries) RelateCappTask(ctx context.Context, arg RelateCappTaskParams) error {
	_, err := q.db.ExecContext(ctx, relateCappTask, arg.TaskID, arg.CappID)
	return err
}

const relateMappTask = `-- name: RelateMappTask :exec
INSERT INTO TaskMapp (task_id, mapp_id)
VALUES ($1, $2)
`

type RelateMappTaskParams struct {
	TaskID uuid.UUID
	MappID uuid.NullUUID
}

func (q *Queries) RelateMappTask(ctx context.Context, arg RelateMappTaskParams) error {
	_, err := q.db.ExecContext(ctx, relateMappTask, arg.TaskID, arg.MappID)
	return err
}
